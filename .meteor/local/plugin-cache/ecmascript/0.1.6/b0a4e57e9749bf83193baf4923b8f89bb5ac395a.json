{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/* jqBootstrapValidation\n * A plugin for automating validation on Twitter Bootstrap formatted forms.\n *\n * v1.3.6\n *\n * License: MIT <http://opensource.org/licenses/mit-license.php> - see LICENSE file\n *\n * http://ReactiveRaven.github.com/jqBootstrapValidation/\n */\n\n(function ($) {\n\n  var createdElements = [];\n\n  var defaults = {\n    options: {\n      prependExistingHelpBlock: false,\n      sniffHtml: true, // sniff for 'required', 'maxlength', etc\n      preventSubmit: true, // stop the form submit event from firing if validation fails\n      submitError: false, // function called if there is an error when trying to submit\n      submitSuccess: false, // function called just before a successful submit event is sent to the server\n      semanticallyStrict: false, // set to true to tidy up generated HTML output\n      autoAdd: {\n        helpBlocks: true\n      },\n      filter: function () {\n        // return $(this).is(\":visible\"); // only validate elements you can see\n        return true; // validate everything\n      }\n    },\n    methods: {\n      init: function (options) {\n\n        var settings = $.extend(true, {}, defaults);\n\n        settings.options = $.extend(true, settings.options, options);\n\n        var $siblingElements = this;\n\n        var uniqueForms = $.unique($siblingElements.map(function () {\n          return $(this).parents(\"form\")[0];\n        }).toArray());\n\n        $(uniqueForms).bind(\"submit\", function (e) {\n          var $form = $(this);\n          var warningsFound = 0;\n          var $inputs = $form.find(\"input,textarea,select\").not(\"[type=submit],[type=image]\").filter(settings.options.filter);\n          $inputs.trigger(\"submit.validation\").trigger(\"validationLostFocus.validation\");\n\n          $inputs.each(function (i, el) {\n            var $this = $(el),\n                $controlGroup = $this.parents(\".control-group\").first();\n            if ($controlGroup.hasClass(\"warning\")) {\n              $controlGroup.removeClass(\"warning\").addClass(\"error\");\n              warningsFound++;\n            }\n          });\n\n          $inputs.trigger(\"validationLostFocus.validation\");\n\n          if (warningsFound) {\n            if (settings.options.preventSubmit) {\n              e.preventDefault();\n            }\n            $form.addClass(\"error\");\n            if ($.isFunction(settings.options.submitError)) {\n              settings.options.submitError($form, e, $inputs.jqBootstrapValidation(\"collectErrors\", true));\n            }\n          } else {\n            $form.removeClass(\"error\");\n            if ($.isFunction(settings.options.submitSuccess)) {\n              settings.options.submitSuccess($form, e);\n            }\n          }\n        });\n\n        return this.each(function () {\n\n          // Get references to everything we're interested in\n          var $this = $(this),\n              $controlGroup = $this.parents(\".control-group\").first(),\n              $helpBlock = $controlGroup.find(\".help-block\").first(),\n              $form = $this.parents(\"form\").first(),\n              validatorNames = [];\n\n          // create message container if not exists\n          if (!$helpBlock.length && settings.options.autoAdd && settings.options.autoAdd.helpBlocks) {\n            $helpBlock = $('<div class=\"help-block\" />');\n            $controlGroup.find('.controls').append($helpBlock);\n            createdElements.push($helpBlock[0]);\n          }\n\n          // =============================================================\n          //                                     SNIFF HTML FOR VALIDATORS\n          // =============================================================\n\n          // *snort sniff snuffle*\n\n          if (settings.options.sniffHtml) {\n            var message = \"\";\n            // ---------------------------------------------------------\n            //                                                   PATTERN\n            // ---------------------------------------------------------\n            if ($this.attr(\"pattern\") !== undefined) {\n              message = \"Not in the expected format<!-- data-validation-pattern-message to override -->\";\n              if ($this.data(\"validationPatternMessage\")) {\n                message = $this.data(\"validationPatternMessage\");\n              }\n              $this.data(\"validationPatternMessage\", message);\n              $this.data(\"validationPatternRegex\", $this.attr(\"pattern\"));\n            }\n            // ---------------------------------------------------------\n            //                                                       MAX\n            // ---------------------------------------------------------\n            if ($this.attr(\"max\") !== undefined || $this.attr(\"aria-valuemax\") !== undefined) {\n              var max = $this.attr(\"max\") !== undefined ? $this.attr(\"max\") : $this.attr(\"aria-valuemax\");\n              message = \"Too high: Maximum of '\" + max + \"'<!-- data-validation-max-message to override -->\";\n              if ($this.data(\"validationMaxMessage\")) {\n                message = $this.data(\"validationMaxMessage\");\n              }\n              $this.data(\"validationMaxMessage\", message);\n              $this.data(\"validationMaxMax\", max);\n            }\n            // ---------------------------------------------------------\n            //                                                       MIN\n            // ---------------------------------------------------------\n            if ($this.attr(\"min\") !== undefined || $this.attr(\"aria-valuemin\") !== undefined) {\n              var min = $this.attr(\"min\") !== undefined ? $this.attr(\"min\") : $this.attr(\"aria-valuemin\");\n              message = \"Too low: Minimum of '\" + min + \"'<!-- data-validation-min-message to override -->\";\n              if ($this.data(\"validationMinMessage\")) {\n                message = $this.data(\"validationMinMessage\");\n              }\n              $this.data(\"validationMinMessage\", message);\n              $this.data(\"validationMinMin\", min);\n            }\n            // ---------------------------------------------------------\n            //                                                 MAXLENGTH\n            // ---------------------------------------------------------\n            if ($this.attr(\"maxlength\") !== undefined) {\n              message = \"Too long: Maximum of '\" + $this.attr(\"maxlength\") + \"' characters<!-- data-validation-maxlength-message to override -->\";\n              if ($this.data(\"validationMaxlengthMessage\")) {\n                message = $this.data(\"validationMaxlengthMessage\");\n              }\n              $this.data(\"validationMaxlengthMessage\", message);\n              $this.data(\"validationMaxlengthMaxlength\", $this.attr(\"maxlength\"));\n            }\n            // ---------------------------------------------------------\n            //                                                 MINLENGTH\n            // ---------------------------------------------------------\n            if ($this.attr(\"minlength\") !== undefined) {\n              message = \"Too short: Minimum of '\" + $this.attr(\"minlength\") + \"' characters<!-- data-validation-minlength-message to override -->\";\n              if ($this.data(\"validationMinlengthMessage\")) {\n                message = $this.data(\"validationMinlengthMessage\");\n              }\n              $this.data(\"validationMinlengthMessage\", message);\n              $this.data(\"validationMinlengthMinlength\", $this.attr(\"minlength\"));\n            }\n            // ---------------------------------------------------------\n            //                                                  REQUIRED\n            // ---------------------------------------------------------\n            if ($this.attr(\"required\") !== undefined || $this.attr(\"aria-required\") !== undefined) {\n              message = settings.builtInValidators.required.message;\n              if ($this.data(\"validationRequiredMessage\")) {\n                message = $this.data(\"validationRequiredMessage\");\n              }\n              $this.data(\"validationRequiredMessage\", message);\n            }\n            // ---------------------------------------------------------\n            //                                                    NUMBER\n            // ---------------------------------------------------------\n            if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"number\") {\n              message = settings.builtInValidators.number.message;\n              if ($this.data(\"validationNumberMessage\")) {\n                message = $this.data(\"validationNumberMessage\");\n              }\n              $this.data(\"validationNumberMessage\", message);\n            }\n            // ---------------------------------------------------------\n            //                                                     EMAIL\n            // ---------------------------------------------------------\n            if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"email\") {\n              message = \"Not a valid email address<!-- data-validator-validemail-message to override -->\";\n              if ($this.data(\"validationValidemailMessage\")) {\n                message = $this.data(\"validationValidemailMessage\");\n              } else if ($this.data(\"validationEmailMessage\")) {\n                message = $this.data(\"validationEmailMessage\");\n              }\n              $this.data(\"validationValidemailMessage\", message);\n            }\n            // ---------------------------------------------------------\n            //                                                MINCHECKED\n            // ---------------------------------------------------------\n            if ($this.attr(\"minchecked\") !== undefined) {\n              message = \"Not enough options checked; Minimum of '\" + $this.attr(\"minchecked\") + \"' required<!-- data-validation-minchecked-message to override -->\";\n              if ($this.data(\"validationMincheckedMessage\")) {\n                message = $this.data(\"validationMincheckedMessage\");\n              }\n              $this.data(\"validationMincheckedMessage\", message);\n              $this.data(\"validationMincheckedMinchecked\", $this.attr(\"minchecked\"));\n            }\n            // ---------------------------------------------------------\n            //                                                MAXCHECKED\n            // ---------------------------------------------------------\n            if ($this.attr(\"maxchecked\") !== undefined) {\n              message = \"Too many options checked; Maximum of '\" + $this.attr(\"maxchecked\") + \"' required<!-- data-validation-maxchecked-message to override -->\";\n              if ($this.data(\"validationMaxcheckedMessage\")) {\n                message = $this.data(\"validationMaxcheckedMessage\");\n              }\n              $this.data(\"validationMaxcheckedMessage\", message);\n              $this.data(\"validationMaxcheckedMaxchecked\", $this.attr(\"maxchecked\"));\n            }\n          }\n\n          // =============================================================\n          //                                       COLLECT VALIDATOR NAMES\n          // =============================================================\n\n          // Get named validators\n          if ($this.data(\"validation\") !== undefined) {\n            validatorNames = $this.data(\"validation\").split(\",\");\n          }\n\n          // Get extra ones defined on the element's data attributes\n          $.each($this.data(), function (i, el) {\n            var parts = i.replace(/([A-Z])/g, \",$1\").split(\",\");\n            if (parts[0] === \"validation\" && parts[1]) {\n              validatorNames.push(parts[1]);\n            }\n          });\n\n          // =============================================================\n          //                                     NORMALISE VALIDATOR NAMES\n          // =============================================================\n\n          var validatorNamesToInspect = validatorNames;\n          var newValidatorNamesToInspect = [];\n\n          do // repeatedly expand 'shortcut' validators into their real validators\n          {\n            // Uppercase only the first letter of each name\n            $.each(validatorNames, function (i, el) {\n              validatorNames[i] = formatValidatorName(el);\n            });\n\n            // Remove duplicate validator names\n            validatorNames = $.unique(validatorNames);\n\n            // Pull out the new validator names from each shortcut\n            newValidatorNamesToInspect = [];\n            $.each(validatorNamesToInspect, function (i, el) {\n              if ($this.data(\"validation\" + el + \"Shortcut\") !== undefined) {\n                // Are these custom validators?\n                // Pull them out!\n                $.each($this.data(\"validation\" + el + \"Shortcut\").split(\",\"), function (i2, el2) {\n                  newValidatorNamesToInspect.push(el2);\n                });\n              } else if (settings.builtInValidators[el.toLowerCase()]) {\n                // Is this a recognised built-in?\n                // Pull it out!\n                var validator = settings.builtInValidators[el.toLowerCase()];\n                if (validator.type.toLowerCase() === \"shortcut\") {\n                  $.each(validator.shortcut.split(\",\"), function (i, el) {\n                    el = formatValidatorName(el);\n                    newValidatorNamesToInspect.push(el);\n                    validatorNames.push(el);\n                  });\n                }\n              }\n            });\n\n            validatorNamesToInspect = newValidatorNamesToInspect;\n          } while (validatorNamesToInspect.length > 0);\n\n          // =============================================================\n          //                                       SET UP VALIDATOR ARRAYS\n          // =============================================================\n\n          var validators = {};\n\n          $.each(validatorNames, function (i, el) {\n            // Set up the 'override' message\n            var message = $this.data(\"validation\" + el + \"Message\");\n            var hasOverrideMessage = message !== undefined;\n            var foundValidator = false;\n            message = message ? message : \"'\" + el + \"' validation failed <!-- Add attribute 'data-validation-\" + el.toLowerCase() + \"-message' to input to change this message -->\";\n\n            $.each(settings.validatorTypes, function (validatorType, validatorTemplate) {\n              if (validators[validatorType] === undefined) {\n                validators[validatorType] = [];\n              }\n              if (!foundValidator && $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name)) !== undefined) {\n                validators[validatorType].push($.extend(true, {\n                  name: formatValidatorName(validatorTemplate.name),\n                  message: message\n                }, validatorTemplate.init($this, el)));\n                foundValidator = true;\n              }\n            });\n\n            if (!foundValidator && settings.builtInValidators[el.toLowerCase()]) {\n\n              var validator = $.extend(true, {}, settings.builtInValidators[el.toLowerCase()]);\n              if (hasOverrideMessage) {\n                validator.message = message;\n              }\n              var validatorType = validator.type.toLowerCase();\n\n              if (validatorType === \"shortcut\") {\n                foundValidator = true;\n              } else {\n                $.each(settings.validatorTypes, function (validatorTemplateType, validatorTemplate) {\n                  if (validators[validatorTemplateType] === undefined) {\n                    validators[validatorTemplateType] = [];\n                  }\n                  if (!foundValidator && validatorType === validatorTemplateType.toLowerCase()) {\n                    $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name), validator[validatorTemplate.name.toLowerCase()]);\n                    validators[validatorType].push($.extend(validator, validatorTemplate.init($this, el)));\n                    foundValidator = true;\n                  }\n                });\n              }\n            }\n\n            if (!foundValidator) {\n              $.error(\"Cannot find validation info for '\" + el + \"'\");\n            }\n          });\n\n          // =============================================================\n          //                                         STORE FALLBACK VALUES\n          // =============================================================\n\n          $helpBlock.data(\"original-contents\", $helpBlock.data(\"original-contents\") ? $helpBlock.data(\"original-contents\") : $helpBlock.html());\n\n          $helpBlock.data(\"original-role\", $helpBlock.data(\"original-role\") ? $helpBlock.data(\"original-role\") : $helpBlock.attr(\"role\"));\n\n          $controlGroup.data(\"original-classes\", $controlGroup.data(\"original-clases\") ? $controlGroup.data(\"original-classes\") : $controlGroup.attr(\"class\"));\n\n          $this.data(\"original-aria-invalid\", $this.data(\"original-aria-invalid\") ? $this.data(\"original-aria-invalid\") : $this.attr(\"aria-invalid\"));\n\n          // =============================================================\n          //                                                    VALIDATION\n          // =============================================================\n\n          $this.bind(\"validation.validation\", function (event, params) {\n\n            var value = getValue($this);\n\n            // Get a list of the errors to apply\n            var errorsFound = [];\n\n            $.each(validators, function (validatorType, validatorTypeArray) {\n              if (value || value.length || params && params.includeEmpty || !!settings.validatorTypes[validatorType].blockSubmit && params && !!params.submitting) {\n                $.each(validatorTypeArray, function (i, validator) {\n                  if (settings.validatorTypes[validatorType].validate($this, value, validator)) {\n                    errorsFound.push(validator.message);\n                  }\n                });\n              }\n            });\n\n            return errorsFound;\n          });\n\n          $this.bind(\"getValidators.validation\", function () {\n            return validators;\n          });\n\n          // =============================================================\n          //                                             WATCH FOR CHANGES\n          // =============================================================\n          $this.bind(\"submit.validation\", function () {\n            return $this.triggerHandler(\"change.validation\", { submitting: true });\n          });\n          $this.bind([\"keyup\", \"focus\", \"blur\", \"click\", \"keydown\", \"keypress\", \"change\"].join(\".validation \") + \".validation\", function (e, params) {\n\n            var value = getValue($this);\n\n            var errorsFound = [];\n\n            $controlGroup.find(\"input,textarea,select\").each(function (i, el) {\n              var oldCount = errorsFound.length;\n              $.each($(el).triggerHandler(\"validation.validation\", params), function (j, message) {\n                errorsFound.push(message);\n              });\n              if (errorsFound.length > oldCount) {\n                $(el).attr(\"aria-invalid\", \"true\");\n              } else {\n                var original = $this.data(\"original-aria-invalid\");\n                $(el).attr(\"aria-invalid\", original !== undefined ? original : false);\n              }\n            });\n\n            $form.find(\"input,select,textarea\").not($this).not(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\").trigger(\"validationLostFocus.validation\");\n\n            errorsFound = $.unique(errorsFound.sort());\n\n            // Were there any errors?\n            if (errorsFound.length) {\n              // Better flag it up as a warning.\n              $controlGroup.removeClass(\"success error\").addClass(\"warning\");\n\n              // How many errors did we find?\n              if (settings.options.semanticallyStrict && errorsFound.length === 1) {\n                // Only one? Being strict? Just output it.\n                $helpBlock.html(errorsFound[0] + (settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\"));\n              } else {\n                // Multiple? Being sloppy? Glue them together into an UL.\n                $helpBlock.html(\"<ul role=\\\"alert\\\"><li>\" + errorsFound.join(\"</li><li>\") + \"</li></ul>\" + (settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\"));\n              }\n            } else {\n              $controlGroup.removeClass(\"warning error success\");\n              if (value.length > 0) {\n                $controlGroup.addClass(\"success\");\n              }\n              $helpBlock.html($helpBlock.data(\"original-contents\"));\n            }\n\n            if (e.type === \"blur\") {\n              $controlGroup.removeClass(\"success\");\n            }\n          });\n          $this.bind(\"validationLostFocus.validation\", function () {\n            $controlGroup.removeClass(\"success\");\n          });\n        });\n      },\n      destroy: function () {\n\n        return this.each(function () {\n\n          var $this = $(this),\n              $controlGroup = $this.parents(\".control-group\").first(),\n              $helpBlock = $controlGroup.find(\".help-block\").first();\n\n          // remove our events\n          $this.unbind('.validation'); // events are namespaced.\n          // reset help text\n          $helpBlock.html($helpBlock.data(\"original-contents\"));\n          // reset classes\n          $controlGroup.attr(\"class\", $controlGroup.data(\"original-classes\"));\n          // reset aria\n          $this.attr(\"aria-invalid\", $this.data(\"original-aria-invalid\"));\n          // reset role\n          $helpBlock.attr(\"role\", $this.data(\"original-role\"));\n          // remove all elements we created\n          if (createdElements.indexOf($helpBlock[0]) > -1) {\n            $helpBlock.remove();\n          }\n        });\n      },\n      collectErrors: function (includeEmpty) {\n\n        var errorMessages = {};\n        this.each(function (i, el) {\n          var $el = $(el);\n          var name = $el.attr(\"name\");\n          var errors = $el.triggerHandler(\"validation.validation\", { includeEmpty: true });\n          errorMessages[name] = $.extend(true, errors, errorMessages[name]);\n        });\n\n        $.each(errorMessages, function (i, el) {\n          if (el.length === 0) {\n            delete errorMessages[i];\n          }\n        });\n\n        return errorMessages;\n      },\n      hasErrors: function () {\n\n        var errorMessages = [];\n\n        this.each(function (i, el) {\n          errorMessages = errorMessages.concat($(el).triggerHandler(\"getValidators.validation\") ? $(el).triggerHandler(\"validation.validation\", { submitting: true }) : []);\n        });\n\n        return errorMessages.length > 0;\n      },\n      override: function (newDefaults) {\n        defaults = $.extend(true, defaults, newDefaults);\n      }\n    },\n    validatorTypes: {\n      callback: {\n        name: \"callback\",\n        init: function ($this, name) {\n          return {\n            validatorName: name,\n            callback: $this.data(\"validation\" + name + \"Callback\"),\n            lastValue: $this.val(),\n            lastValid: true,\n            lastFinished: true\n          };\n        },\n        validate: function ($this, value, validator) {\n          if (validator.lastValue === value && validator.lastFinished) {\n            return !validator.lastValid;\n          }\n\n          if (validator.lastFinished === true) {\n            validator.lastValue = value;\n            validator.lastValid = true;\n            validator.lastFinished = false;\n\n            var rrjqbvValidator = validator;\n            var rrjqbvThis = $this;\n            executeFunctionByName(validator.callback, window, $this, value, function (data) {\n              if (rrjqbvValidator.lastValue === data.value) {\n                rrjqbvValidator.lastValid = data.valid;\n                if (data.message) {\n                  rrjqbvValidator.message = data.message;\n                }\n                rrjqbvValidator.lastFinished = true;\n                rrjqbvThis.data(\"validation\" + rrjqbvValidator.validatorName + \"Message\", rrjqbvValidator.message);\n                // Timeout is set to avoid problems with the events being considered 'already fired'\n                setTimeout(function () {\n                  rrjqbvThis.trigger(\"change.validation\");\n                }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n              }\n            });\n          }\n\n          return false;\n        }\n      },\n      ajax: {\n        name: \"ajax\",\n        init: function ($this, name) {\n          return {\n            validatorName: name,\n            url: $this.data(\"validation\" + name + \"Ajax\"),\n            lastValue: $this.val(),\n            lastValid: true,\n            lastFinished: true\n          };\n        },\n        validate: function ($this, value, validator) {\n          if (\"\" + validator.lastValue === \"\" + value && validator.lastFinished === true) {\n            return validator.lastValid === false;\n          }\n\n          if (validator.lastFinished === true) {\n            validator.lastValue = value;\n            validator.lastValid = true;\n            validator.lastFinished = false;\n            $.ajax({\n              url: validator.url,\n              data: \"value=\" + value + \"&field=\" + $this.attr(\"name\"),\n              dataType: \"json\",\n              success: function (data) {\n                if (\"\" + validator.lastValue === \"\" + data.value) {\n                  validator.lastValid = !!data.valid;\n                  if (data.message) {\n                    validator.message = data.message;\n                  }\n                  validator.lastFinished = true;\n                  $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\n                  // Timeout is set to avoid problems with the events being considered 'already fired'\n                  setTimeout(function () {\n                    $this.trigger(\"change.validation\");\n                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n                }\n              },\n              failure: function () {\n                validator.lastValid = true;\n                validator.message = \"ajax call failed\";\n                validator.lastFinished = true;\n                $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\n                // Timeout is set to avoid problems with the events being considered 'already fired'\n                setTimeout(function () {\n                  $this.trigger(\"change.validation\");\n                }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n              }\n            });\n          }\n\n          return false;\n        }\n      },\n      regex: {\n        name: \"regex\",\n        init: function ($this, name) {\n          return { regex: regexFromString($this.data(\"validation\" + name + \"Regex\")) };\n        },\n        validate: function ($this, value, validator) {\n          return !validator.regex.test(value) && !validator.negative || validator.regex.test(value) && validator.negative;\n        }\n      },\n      required: {\n        name: \"required\",\n        init: function ($this, name) {\n          return {};\n        },\n        validate: function ($this, value, validator) {\n          return !!(value.length === 0 && !validator.negative) || !!(value.length > 0 && validator.negative);\n        },\n        blockSubmit: true\n      },\n      match: {\n        name: \"match\",\n        init: function ($this, name) {\n          var element = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.data(\"validation\" + name + \"Match\") + \"\\\"]\").first();\n          element.bind(\"validation.validation\", function () {\n            $this.trigger(\"change.validation\", { submitting: true });\n          });\n          return { \"element\": element };\n        },\n        validate: function ($this, value, validator) {\n          return value !== validator.element.val() && !validator.negative || value === validator.element.val() && validator.negative;\n        },\n        blockSubmit: true\n      },\n      max: {\n        name: \"max\",\n        init: function ($this, name) {\n          return { max: $this.data(\"validation\" + name + \"Max\") };\n        },\n        validate: function ($this, value, validator) {\n          return parseFloat(value, 10) > parseFloat(validator.max, 10) && !validator.negative || parseFloat(value, 10) <= parseFloat(validator.max, 10) && validator.negative;\n        }\n      },\n      min: {\n        name: \"min\",\n        init: function ($this, name) {\n          return { min: $this.data(\"validation\" + name + \"Min\") };\n        },\n        validate: function ($this, value, validator) {\n          return parseFloat(value) < parseFloat(validator.min) && !validator.negative || parseFloat(value) >= parseFloat(validator.min) && validator.negative;\n        }\n      },\n      maxlength: {\n        name: \"maxlength\",\n        init: function ($this, name) {\n          return { maxlength: $this.data(\"validation\" + name + \"Maxlength\") };\n        },\n        validate: function ($this, value, validator) {\n          return value.length > validator.maxlength && !validator.negative || value.length <= validator.maxlength && validator.negative;\n        }\n      },\n      minlength: {\n        name: \"minlength\",\n        init: function ($this, name) {\n          return { minlength: $this.data(\"validation\" + name + \"Minlength\") };\n        },\n        validate: function ($this, value, validator) {\n          return value.length < validator.minlength && !validator.negative || value.length >= validator.minlength && validator.negative;\n        }\n      },\n      maxchecked: {\n        name: \"maxchecked\",\n        init: function ($this, name) {\n          var elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\n          elements.bind(\"click.validation\", function () {\n            $this.trigger(\"change.validation\", { includeEmpty: true });\n          });\n          return { maxchecked: $this.data(\"validation\" + name + \"Maxchecked\"), elements: elements };\n        },\n        validate: function ($this, value, validator) {\n          return validator.elements.filter(\":checked\").length > validator.maxchecked && !validator.negative || validator.elements.filter(\":checked\").length <= validator.maxchecked && validator.negative;\n        },\n        blockSubmit: true\n      },\n      minchecked: {\n        name: \"minchecked\",\n        init: function ($this, name) {\n          var elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\n          elements.bind(\"click.validation\", function () {\n            $this.trigger(\"change.validation\", { includeEmpty: true });\n          });\n          return { minchecked: $this.data(\"validation\" + name + \"Minchecked\"), elements: elements };\n        },\n        validate: function ($this, value, validator) {\n          return validator.elements.filter(\":checked\").length < validator.minchecked && !validator.negative || validator.elements.filter(\":checked\").length >= validator.minchecked && validator.negative;\n        },\n        blockSubmit: true\n      }\n    },\n    builtInValidators: {\n      email: {\n        name: \"Email\",\n        type: \"shortcut\",\n        shortcut: \"validemail\"\n      },\n      validemail: {\n        name: \"Validemail\",\n        type: \"regex\",\n        regex: \"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\\\.[A-Za-z]{2,4}\",\n        message: \"Not a valid email address<!-- data-validator-validemail-message to override -->\"\n      },\n      passwordagain: {\n        name: \"Passwordagain\",\n        type: \"match\",\n        match: \"password\",\n        message: \"Does not match the given password<!-- data-validator-paswordagain-message to override -->\"\n      },\n      positive: {\n        name: \"Positive\",\n        type: \"shortcut\",\n        shortcut: \"number,positivenumber\"\n      },\n      negative: {\n        name: \"Negative\",\n        type: \"shortcut\",\n        shortcut: \"number,negativenumber\"\n      },\n      number: {\n        name: \"Number\",\n        type: \"regex\",\n        regex: \"([+-]?\\\\\\d+(\\\\\\.\\\\\\d*)?([eE][+-]?[0-9]+)?)?\",\n        message: \"Must be a number<!-- data-validator-number-message to override -->\"\n      },\n      integer: {\n        name: \"Integer\",\n        type: \"regex\",\n        regex: \"[+-]?\\\\\\d+\",\n        message: \"No decimal places allowed<!-- data-validator-integer-message to override -->\"\n      },\n      positivenumber: {\n        name: \"Positivenumber\",\n        type: \"min\",\n        min: 0,\n        message: \"Must be a positive number<!-- data-validator-positivenumber-message to override -->\"\n      },\n      negativenumber: {\n        name: \"Negativenumber\",\n        type: \"max\",\n        max: 0,\n        message: \"Must be a negative number<!-- data-validator-negativenumber-message to override -->\"\n      },\n      required: {\n        name: \"Required\",\n        type: \"required\",\n        message: \"This is required<!-- data-validator-required-message to override -->\"\n      },\n      checkone: {\n        name: \"Checkone\",\n        type: \"minchecked\",\n        minchecked: 1,\n        message: \"Check at least one option<!-- data-validation-checkone-message to override -->\"\n      }\n    }\n  };\n\n  var formatValidatorName = function (name) {\n    return name.toLowerCase().replace(/(^|\\s)([a-z])/g, function (m, p1, p2) {\n      return p1 + p2.toUpperCase();\n    });\n  };\n\n  var getValue = function ($this) {\n    // Extract the value we're talking about\n    var value = $this.val();\n    var type = $this.attr(\"type\");\n    if (type === \"checkbox\") {\n      value = $this.is(\":checked\") ? value : \"\";\n    }\n    if (type === \"radio\") {\n      value = $('input[name=\"' + $this.attr(\"name\") + '\"]:checked').length > 0 ? value : \"\";\n    }\n    return value;\n  };\n\n  function regexFromString(inputstring) {\n    return new RegExp(\"^\" + inputstring + \"$\");\n  }\n\n  /**\n   * Thanks to Jason Bunting via StackOverflow.com\n   *\n   * http://stackoverflow.com/questions/359788/how-to-execute-a-javascript-function-when-i-have-its-name-as-a-string#answer-359910\n   * Short link: http://tinyurl.com/executeFunctionByName\n  **/\n  function executeFunctionByName(functionName, context /*, args*/) {\n    var args = Array.prototype.slice.call(arguments).splice(2);\n    var namespaces = functionName.split(\".\");\n    var func = namespaces.pop();\n    for (var i = 0; i < namespaces.length; i++) {\n      context = context[namespaces[i]];\n    }\n    return context[func].apply(this, args);\n  }\n\n  $.fn.jqBootstrapValidation = function (method) {\n\n    if (defaults.methods[method]) {\n      return defaults.methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n    } else if (typeof method === 'object' || !method) {\n      return defaults.methods.init.apply(this, arguments);\n    } else {\n      $.error('Method ' + method + ' does not exist on jQuery.jqBootstrapValidation');\n      return null;\n    }\n  };\n\n  $.jqBootstrapValidation = function (options) {\n    $(\":input\").not(\"[type=image],[type=submit]\").jqBootstrapValidation.apply(this, arguments);\n  };\n})(jQuery);","ast":null,"map":{"version":3,"sources":["/client/js/template_assets/12. jqBootstrapValidation.js"],"names":[],"mappings":"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","file":"/client/js/template_assets/12. jqBootstrapValidation.js.map","sourcesContent":["/* jqBootstrapValidation\n * A plugin for automating validation on Twitter Bootstrap formatted forms.\n *\n * v1.3.6\n *\n * License: MIT <http://opensource.org/licenses/mit-license.php> - see LICENSE file\n *\n * http://ReactiveRaven.github.com/jqBootstrapValidation/\n */\n\n(function( $ ){\n\n\tvar createdElements = [];\n\n\tvar defaults = {\n\t\toptions: {\n\t\t\tprependExistingHelpBlock: false,\n\t\t\tsniffHtml: true, // sniff for 'required', 'maxlength', etc\n\t\t\tpreventSubmit: true, // stop the form submit event from firing if validation fails\n\t\t\tsubmitError: false, // function called if there is an error when trying to submit\n\t\t\tsubmitSuccess: false, // function called just before a successful submit event is sent to the server\n            semanticallyStrict: false, // set to true to tidy up generated HTML output\n\t\t\tautoAdd: {\n\t\t\t\thelpBlocks: true\n\t\t\t},\n            filter: function () {\n                // return $(this).is(\":visible\"); // only validate elements you can see\n                return true; // validate everything\n            }\n\t\t},\n    methods: {\n      init : function( options ) {\n\n        var settings = $.extend(true, {}, defaults);\n\n        settings.options = $.extend(true, settings.options, options);\n\n        var $siblingElements = this;\n\n        var uniqueForms = $.unique(\n          $siblingElements.map( function () {\n            return $(this).parents(\"form\")[0];\n          }).toArray()\n        );\n\n        $(uniqueForms).bind(\"submit\", function (e) {\n          var $form = $(this);\n          var warningsFound = 0;\n          var $inputs = $form.find(\"input,textarea,select\").not(\"[type=submit],[type=image]\").filter(settings.options.filter);\n          $inputs.trigger(\"submit.validation\").trigger(\"validationLostFocus.validation\");\n\n          $inputs.each(function (i, el) {\n            var $this = $(el),\n              $controlGroup = $this.parents(\".control-group\").first();\n            if (\n              $controlGroup.hasClass(\"warning\")\n            ) {\n              $controlGroup.removeClass(\"warning\").addClass(\"error\");\n              warningsFound++;\n            }\n          });\n\n          $inputs.trigger(\"validationLostFocus.validation\");\n\n          if (warningsFound) {\n            if (settings.options.preventSubmit) {\n              e.preventDefault();\n            }\n            $form.addClass(\"error\");\n            if ($.isFunction(settings.options.submitError)) {\n              settings.options.submitError($form, e, $inputs.jqBootstrapValidation(\"collectErrors\", true));\n            }\n          } else {\n            $form.removeClass(\"error\");\n            if ($.isFunction(settings.options.submitSuccess)) {\n              settings.options.submitSuccess($form, e);\n            }\n          }\n        });\n\n        return this.each(function(){\n\n          // Get references to everything we're interested in\n          var $this = $(this),\n            $controlGroup = $this.parents(\".control-group\").first(),\n            $helpBlock = $controlGroup.find(\".help-block\").first(),\n            $form = $this.parents(\"form\").first(),\n            validatorNames = [];\n\n          // create message container if not exists\n          if (!$helpBlock.length && settings.options.autoAdd && settings.options.autoAdd.helpBlocks) {\n              $helpBlock = $('<div class=\"help-block\" />');\n              $controlGroup.find('.controls').append($helpBlock);\n\t\t\t\t\t\t\tcreatedElements.push($helpBlock[0]);\n          }\n\n          // =============================================================\n          //                                     SNIFF HTML FOR VALIDATORS\n          // =============================================================\n\n          // *snort sniff snuffle*\n\n          if (settings.options.sniffHtml) {\n            var message = \"\";\n            // ---------------------------------------------------------\n            //                                                   PATTERN\n            // ---------------------------------------------------------\n            if ($this.attr(\"pattern\") !== undefined) {\n              message = \"Not in the expected format<!-- data-validation-pattern-message to override -->\";\n              if ($this.data(\"validationPatternMessage\")) {\n                message = $this.data(\"validationPatternMessage\");\n              }\n              $this.data(\"validationPatternMessage\", message);\n              $this.data(\"validationPatternRegex\", $this.attr(\"pattern\"));\n            }\n            // ---------------------------------------------------------\n            //                                                       MAX\n            // ---------------------------------------------------------\n            if ($this.attr(\"max\") !== undefined || $this.attr(\"aria-valuemax\") !== undefined) {\n              var max = ($this.attr(\"max\") !== undefined ? $this.attr(\"max\") : $this.attr(\"aria-valuemax\"));\n              message = \"Too high: Maximum of '\" + max + \"'<!-- data-validation-max-message to override -->\";\n              if ($this.data(\"validationMaxMessage\")) {\n                message = $this.data(\"validationMaxMessage\");\n              }\n              $this.data(\"validationMaxMessage\", message);\n              $this.data(\"validationMaxMax\", max);\n            }\n            // ---------------------------------------------------------\n            //                                                       MIN\n            // ---------------------------------------------------------\n            if ($this.attr(\"min\") !== undefined || $this.attr(\"aria-valuemin\") !== undefined) {\n              var min = ($this.attr(\"min\") !== undefined ? $this.attr(\"min\") : $this.attr(\"aria-valuemin\"));\n              message = \"Too low: Minimum of '\" + min + \"'<!-- data-validation-min-message to override -->\";\n              if ($this.data(\"validationMinMessage\")) {\n                message = $this.data(\"validationMinMessage\");\n              }\n              $this.data(\"validationMinMessage\", message);\n              $this.data(\"validationMinMin\", min);\n            }\n            // ---------------------------------------------------------\n            //                                                 MAXLENGTH\n            // ---------------------------------------------------------\n            if ($this.attr(\"maxlength\") !== undefined) {\n              message = \"Too long: Maximum of '\" + $this.attr(\"maxlength\") + \"' characters<!-- data-validation-maxlength-message to override -->\";\n              if ($this.data(\"validationMaxlengthMessage\")) {\n                message = $this.data(\"validationMaxlengthMessage\");\n              }\n              $this.data(\"validationMaxlengthMessage\", message);\n              $this.data(\"validationMaxlengthMaxlength\", $this.attr(\"maxlength\"));\n            }\n            // ---------------------------------------------------------\n            //                                                 MINLENGTH\n            // ---------------------------------------------------------\n            if ($this.attr(\"minlength\") !== undefined) {\n              message = \"Too short: Minimum of '\" + $this.attr(\"minlength\") + \"' characters<!-- data-validation-minlength-message to override -->\";\n              if ($this.data(\"validationMinlengthMessage\")) {\n                message = $this.data(\"validationMinlengthMessage\");\n              }\n              $this.data(\"validationMinlengthMessage\", message);\n              $this.data(\"validationMinlengthMinlength\", $this.attr(\"minlength\"));\n            }\n            // ---------------------------------------------------------\n            //                                                  REQUIRED\n            // ---------------------------------------------------------\n            if ($this.attr(\"required\") !== undefined || $this.attr(\"aria-required\") !== undefined) {\n              message = settings.builtInValidators.required.message;\n              if ($this.data(\"validationRequiredMessage\")) {\n                message = $this.data(\"validationRequiredMessage\");\n              }\n              $this.data(\"validationRequiredMessage\", message);\n            }\n            // ---------------------------------------------------------\n            //                                                    NUMBER\n            // ---------------------------------------------------------\n            if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"number\") {\n              message = settings.builtInValidators.number.message;\n              if ($this.data(\"validationNumberMessage\")) {\n                message = $this.data(\"validationNumberMessage\");\n              }\n              $this.data(\"validationNumberMessage\", message);\n            }\n            // ---------------------------------------------------------\n            //                                                     EMAIL\n            // ---------------------------------------------------------\n            if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"email\") {\n              message = \"Not a valid email address<!-- data-validator-validemail-message to override -->\";\n              if ($this.data(\"validationValidemailMessage\")) {\n                message = $this.data(\"validationValidemailMessage\");\n              } else if ($this.data(\"validationEmailMessage\")) {\n                message = $this.data(\"validationEmailMessage\");\n              }\n              $this.data(\"validationValidemailMessage\", message);\n            }\n            // ---------------------------------------------------------\n            //                                                MINCHECKED\n            // ---------------------------------------------------------\n            if ($this.attr(\"minchecked\") !== undefined) {\n              message = \"Not enough options checked; Minimum of '\" + $this.attr(\"minchecked\") + \"' required<!-- data-validation-minchecked-message to override -->\";\n              if ($this.data(\"validationMincheckedMessage\")) {\n                message = $this.data(\"validationMincheckedMessage\");\n              }\n              $this.data(\"validationMincheckedMessage\", message);\n              $this.data(\"validationMincheckedMinchecked\", $this.attr(\"minchecked\"));\n            }\n            // ---------------------------------------------------------\n            //                                                MAXCHECKED\n            // ---------------------------------------------------------\n            if ($this.attr(\"maxchecked\") !== undefined) {\n              message = \"Too many options checked; Maximum of '\" + $this.attr(\"maxchecked\") + \"' required<!-- data-validation-maxchecked-message to override -->\";\n              if ($this.data(\"validationMaxcheckedMessage\")) {\n                message = $this.data(\"validationMaxcheckedMessage\");\n              }\n              $this.data(\"validationMaxcheckedMessage\", message);\n              $this.data(\"validationMaxcheckedMaxchecked\", $this.attr(\"maxchecked\"));\n            }\n          }\n\n          // =============================================================\n          //                                       COLLECT VALIDATOR NAMES\n          // =============================================================\n\n          // Get named validators\n          if ($this.data(\"validation\") !== undefined) {\n            validatorNames = $this.data(\"validation\").split(\",\");\n          }\n\n          // Get extra ones defined on the element's data attributes\n          $.each($this.data(), function (i, el) {\n            var parts = i.replace(/([A-Z])/g, \",$1\").split(\",\");\n            if (parts[0] === \"validation\" && parts[1]) {\n              validatorNames.push(parts[1]);\n            }\n          });\n\n          // =============================================================\n          //                                     NORMALISE VALIDATOR NAMES\n          // =============================================================\n\n          var validatorNamesToInspect = validatorNames;\n          var newValidatorNamesToInspect = [];\n\n          do // repeatedly expand 'shortcut' validators into their real validators\n          {\n            // Uppercase only the first letter of each name\n            $.each(validatorNames, function (i, el) {\n              validatorNames[i] = formatValidatorName(el);\n            });\n\n            // Remove duplicate validator names\n            validatorNames = $.unique(validatorNames);\n\n            // Pull out the new validator names from each shortcut\n            newValidatorNamesToInspect = [];\n            $.each(validatorNamesToInspect, function(i, el) {\n              if ($this.data(\"validation\" + el + \"Shortcut\") !== undefined) {\n                // Are these custom validators?\n                // Pull them out!\n                $.each($this.data(\"validation\" + el + \"Shortcut\").split(\",\"), function(i2, el2) {\n                  newValidatorNamesToInspect.push(el2);\n                });\n              } else if (settings.builtInValidators[el.toLowerCase()]) {\n                // Is this a recognised built-in?\n                // Pull it out!\n                var validator = settings.builtInValidators[el.toLowerCase()];\n                if (validator.type.toLowerCase() === \"shortcut\") {\n                  $.each(validator.shortcut.split(\",\"), function (i, el) {\n                    el = formatValidatorName(el);\n                    newValidatorNamesToInspect.push(el);\n                    validatorNames.push(el);\n                  });\n                }\n              }\n            });\n\n            validatorNamesToInspect = newValidatorNamesToInspect;\n\n          } while (validatorNamesToInspect.length > 0)\n\n          // =============================================================\n          //                                       SET UP VALIDATOR ARRAYS\n          // =============================================================\n\n          var validators = {};\n\n          $.each(validatorNames, function (i, el) {\n            // Set up the 'override' message\n            var message = $this.data(\"validation\" + el + \"Message\");\n            var hasOverrideMessage = (message !== undefined);\n            var foundValidator = false;\n            message =\n              (\n                message\n                  ? message\n                  : \"'\" + el + \"' validation failed <!-- Add attribute 'data-validation-\" + el.toLowerCase() + \"-message' to input to change this message -->\"\n              )\n            ;\n\n            $.each(\n              settings.validatorTypes,\n              function (validatorType, validatorTemplate) {\n                if (validators[validatorType] === undefined) {\n                  validators[validatorType] = [];\n                }\n                if (!foundValidator && $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name)) !== undefined) {\n                  validators[validatorType].push(\n                    $.extend(\n                      true,\n                      {\n                        name: formatValidatorName(validatorTemplate.name),\n                        message: message\n                      },\n                      validatorTemplate.init($this, el)\n                    )\n                  );\n                  foundValidator = true;\n                }\n              }\n            );\n\n            if (!foundValidator && settings.builtInValidators[el.toLowerCase()]) {\n\n              var validator = $.extend(true, {}, settings.builtInValidators[el.toLowerCase()]);\n              if (hasOverrideMessage) {\n                validator.message = message;\n              }\n              var validatorType = validator.type.toLowerCase();\n\n              if (validatorType === \"shortcut\") {\n                foundValidator = true;\n              } else {\n                $.each(\n                  settings.validatorTypes,\n                  function (validatorTemplateType, validatorTemplate) {\n                    if (validators[validatorTemplateType] === undefined) {\n                      validators[validatorTemplateType] = [];\n                    }\n                    if (!foundValidator && validatorType === validatorTemplateType.toLowerCase()) {\n                      $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name), validator[validatorTemplate.name.toLowerCase()]);\n                      validators[validatorType].push(\n                        $.extend(\n                          validator,\n                          validatorTemplate.init($this, el)\n                        )\n                      );\n                      foundValidator = true;\n                    }\n                  }\n                );\n              }\n            }\n\n            if (! foundValidator) {\n              $.error(\"Cannot find validation info for '\" + el + \"'\");\n            }\n          });\n\n          // =============================================================\n          //                                         STORE FALLBACK VALUES\n          // =============================================================\n\n          $helpBlock.data(\n            \"original-contents\",\n            (\n              $helpBlock.data(\"original-contents\")\n                ? $helpBlock.data(\"original-contents\")\n                : $helpBlock.html()\n            )\n          );\n\n          $helpBlock.data(\n            \"original-role\",\n            (\n              $helpBlock.data(\"original-role\")\n                ? $helpBlock.data(\"original-role\")\n                : $helpBlock.attr(\"role\")\n            )\n          );\n\n          $controlGroup.data(\n            \"original-classes\",\n            (\n              $controlGroup.data(\"original-clases\")\n                ? $controlGroup.data(\"original-classes\")\n                : $controlGroup.attr(\"class\")\n            )\n          );\n\n          $this.data(\n            \"original-aria-invalid\",\n            (\n              $this.data(\"original-aria-invalid\")\n                ? $this.data(\"original-aria-invalid\")\n                : $this.attr(\"aria-invalid\")\n            )\n          );\n\n          // =============================================================\n          //                                                    VALIDATION\n          // =============================================================\n\n          $this.bind(\n            \"validation.validation\",\n            function (event, params) {\n\n              var value = getValue($this);\n\n              // Get a list of the errors to apply\n              var errorsFound = [];\n\n              $.each(validators, function (validatorType, validatorTypeArray) {\n                if (value || value.length || (params && params.includeEmpty) || (!!settings.validatorTypes[validatorType].blockSubmit && params && !!params.submitting)) {\n                  $.each(validatorTypeArray, function (i, validator) {\n                    if (settings.validatorTypes[validatorType].validate($this, value, validator)) {\n                      errorsFound.push(validator.message);\n                    }\n                  });\n                }\n              });\n\n              return errorsFound;\n            }\n          );\n\n          $this.bind(\n            \"getValidators.validation\",\n            function () {\n              return validators;\n            }\n          );\n\n          // =============================================================\n          //                                             WATCH FOR CHANGES\n          // =============================================================\n          $this.bind(\n            \"submit.validation\",\n            function () {\n              return $this.triggerHandler(\"change.validation\", {submitting: true});\n            }\n          );\n          $this.bind(\n            [\n              \"keyup\",\n              \"focus\",\n              \"blur\",\n              \"click\",\n              \"keydown\",\n              \"keypress\",\n              \"change\"\n            ].join(\".validation \") + \".validation\",\n            function (e, params) {\n\n              var value = getValue($this);\n\n              var errorsFound = [];\n\n              $controlGroup.find(\"input,textarea,select\").each(function (i, el) {\n                var oldCount = errorsFound.length;\n                $.each($(el).triggerHandler(\"validation.validation\", params), function (j, message) {\n                  errorsFound.push(message);\n                });\n                if (errorsFound.length > oldCount) {\n                  $(el).attr(\"aria-invalid\", \"true\");\n                } else {\n                  var original = $this.data(\"original-aria-invalid\");\n                  $(el).attr(\"aria-invalid\", (original !== undefined ? original : false));\n                }\n              });\n\n              $form.find(\"input,select,textarea\").not($this).not(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\").trigger(\"validationLostFocus.validation\");\n\n              errorsFound = $.unique(errorsFound.sort());\n\n              // Were there any errors?\n              if (errorsFound.length) {\n                // Better flag it up as a warning.\n                $controlGroup.removeClass(\"success error\").addClass(\"warning\");\n\n                // How many errors did we find?\n                if (settings.options.semanticallyStrict && errorsFound.length === 1) {\n                  // Only one? Being strict? Just output it.\n                  $helpBlock.html(errorsFound[0] + \n                    ( settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\" ));\n                } else {\n                  // Multiple? Being sloppy? Glue them together into an UL.\n                  $helpBlock.html(\"<ul role=\\\"alert\\\"><li>\" + errorsFound.join(\"</li><li>\") + \"</li></ul>\" +\n                    ( settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\" ));\n                }\n              } else {\n                $controlGroup.removeClass(\"warning error success\");\n                if (value.length > 0) {\n                  $controlGroup.addClass(\"success\");\n                }\n                $helpBlock.html($helpBlock.data(\"original-contents\"));\n              }\n\n              if (e.type === \"blur\") {\n                $controlGroup.removeClass(\"success\");\n              }\n            }\n          );\n          $this.bind(\"validationLostFocus.validation\", function () {\n            $controlGroup.removeClass(\"success\");\n          });\n        });\n      },\n      destroy : function( ) {\n\n        return this.each(\n          function() {\n\n            var\n              $this = $(this),\n              $controlGroup = $this.parents(\".control-group\").first(),\n              $helpBlock = $controlGroup.find(\".help-block\").first();\n\n            // remove our events\n            $this.unbind('.validation'); // events are namespaced.\n            // reset help text\n            $helpBlock.html($helpBlock.data(\"original-contents\"));\n            // reset classes\n            $controlGroup.attr(\"class\", $controlGroup.data(\"original-classes\"));\n            // reset aria\n            $this.attr(\"aria-invalid\", $this.data(\"original-aria-invalid\"));\n            // reset role\n            $helpBlock.attr(\"role\", $this.data(\"original-role\"));\n\t\t\t\t\t\t// remove all elements we created\n\t\t\t\t\t\tif (createdElements.indexOf($helpBlock[0]) > -1) {\n\t\t\t\t\t\t\t$helpBlock.remove();\n\t\t\t\t\t\t}\n\n          }\n        );\n\n      },\n      collectErrors : function(includeEmpty) {\n\n        var errorMessages = {};\n        this.each(function (i, el) {\n          var $el = $(el);\n          var name = $el.attr(\"name\");\n          var errors = $el.triggerHandler(\"validation.validation\", {includeEmpty: true});\n          errorMessages[name] = $.extend(true, errors, errorMessages[name]);\n        });\n\n        $.each(errorMessages, function (i, el) {\n          if (el.length === 0) {\n            delete errorMessages[i];\n          }\n        });\n\n        return errorMessages;\n\n      },\n      hasErrors: function() {\n\n        var errorMessages = [];\n\n        this.each(function (i, el) {\n          errorMessages = errorMessages.concat(\n            $(el).triggerHandler(\"getValidators.validation\") ? $(el).triggerHandler(\"validation.validation\", {submitting: true}) : []\n          );\n        });\n\n        return (errorMessages.length > 0);\n      },\n      override : function (newDefaults) {\n        defaults = $.extend(true, defaults, newDefaults);\n      }\n    },\n\t\tvalidatorTypes: {\n      callback: {\n        name: \"callback\",\n        init: function ($this, name) {\n          return {\n            validatorName: name,\n            callback: $this.data(\"validation\" + name + \"Callback\"),\n            lastValue: $this.val(),\n            lastValid: true,\n            lastFinished: true\n          };\n        },\n        validate: function ($this, value, validator) {\n          if (validator.lastValue === value && validator.lastFinished) {\n            return !validator.lastValid;\n          }\n\n          if (validator.lastFinished === true)\n          {\n            validator.lastValue = value;\n            validator.lastValid = true;\n            validator.lastFinished = false;\n\n            var rrjqbvValidator = validator;\n            var rrjqbvThis = $this;\n            executeFunctionByName(\n              validator.callback,\n              window,\n              $this,\n              value,\n              function (data) {\n                if (rrjqbvValidator.lastValue === data.value) {\n                  rrjqbvValidator.lastValid = data.valid;\n                  if (data.message) {\n                    rrjqbvValidator.message = data.message;\n                  }\n                  rrjqbvValidator.lastFinished = true;\n                  rrjqbvThis.data(\"validation\" + rrjqbvValidator.validatorName + \"Message\", rrjqbvValidator.message);\n                  // Timeout is set to avoid problems with the events being considered 'already fired'\n                  setTimeout(function () {\n                    rrjqbvThis.trigger(\"change.validation\");\n                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n                }\n              }\n            );\n          }\n\n          return false;\n\n        }\n      },\n      ajax: {\n        name: \"ajax\",\n        init: function ($this, name) {\n          return {\n            validatorName: name,\n            url: $this.data(\"validation\" + name + \"Ajax\"),\n            lastValue: $this.val(),\n            lastValid: true,\n            lastFinished: true\n          };\n        },\n        validate: function ($this, value, validator) {\n          if (\"\"+validator.lastValue === \"\"+value && validator.lastFinished === true) {\n            return validator.lastValid === false;\n          }\n\n          if (validator.lastFinished === true)\n          {\n            validator.lastValue = value;\n            validator.lastValid = true;\n            validator.lastFinished = false;\n            $.ajax({\n              url: validator.url,\n              data: \"value=\" + value + \"&field=\" + $this.attr(\"name\"),\n              dataType: \"json\",\n              success: function (data) {\n                if (\"\"+validator.lastValue === \"\"+data.value) {\n                  validator.lastValid = !!(data.valid);\n                  if (data.message) {\n                    validator.message = data.message;\n                  }\n                  validator.lastFinished = true;\n                  $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\n                  // Timeout is set to avoid problems with the events being considered 'already fired'\n                  setTimeout(function () {\n                    $this.trigger(\"change.validation\");\n                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n                }\n              },\n              failure: function () {\n                validator.lastValid = true;\n                validator.message = \"ajax call failed\";\n                validator.lastFinished = true;\n                $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\n                // Timeout is set to avoid problems with the events being considered 'already fired'\n                setTimeout(function () {\n                  $this.trigger(\"change.validation\");\n                }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n              }\n            });\n          }\n\n          return false;\n\n        }\n      },\n\t\t\tregex: {\n\t\t\t\tname: \"regex\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\treturn {regex: regexFromString($this.data(\"validation\" + name + \"Regex\"))};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn (!validator.regex.test(value) && ! validator.negative)\n\t\t\t\t\t\t|| (validator.regex.test(value) && validator.negative);\n\t\t\t\t}\n\t\t\t},\n\t\t\trequired: {\n\t\t\t\tname: \"required\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\treturn {};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn !!(value.length === 0  && ! validator.negative)\n\t\t\t\t\t\t|| !!(value.length > 0 && validator.negative);\n\t\t\t\t},\n        blockSubmit: true\n\t\t\t},\n\t\t\tmatch: {\n\t\t\t\tname: \"match\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\tvar element = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.data(\"validation\" + name + \"Match\") + \"\\\"]\").first();\n\t\t\t\t\telement.bind(\"validation.validation\", function () {\n\t\t\t\t\t\t$this.trigger(\"change.validation\", {submitting: true});\n\t\t\t\t\t});\n\t\t\t\t\treturn {\"element\": element};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn (value !== validator.element.val() && ! validator.negative)\n\t\t\t\t\t\t|| (value === validator.element.val() && validator.negative);\n\t\t\t\t},\n        blockSubmit: true\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tname: \"max\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\treturn {max: $this.data(\"validation\" + name + \"Max\")};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn (parseFloat(value, 10) > parseFloat(validator.max, 10) && ! validator.negative)\n\t\t\t\t\t\t|| (parseFloat(value, 10) <= parseFloat(validator.max, 10) && validator.negative);\n\t\t\t\t}\n\t\t\t},\n\t\t\tmin: {\n\t\t\t\tname: \"min\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\treturn {min: $this.data(\"validation\" + name + \"Min\")};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn (parseFloat(value) < parseFloat(validator.min) && ! validator.negative)\n\t\t\t\t\t\t|| (parseFloat(value) >= parseFloat(validator.min) && validator.negative);\n\t\t\t\t}\n\t\t\t},\n\t\t\tmaxlength: {\n\t\t\t\tname: \"maxlength\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\treturn {maxlength: $this.data(\"validation\" + name + \"Maxlength\")};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn ((value.length > validator.maxlength) && ! validator.negative)\n\t\t\t\t\t\t|| ((value.length <= validator.maxlength) && validator.negative);\n\t\t\t\t}\n\t\t\t},\n\t\t\tminlength: {\n\t\t\t\tname: \"minlength\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\treturn {minlength: $this.data(\"validation\" + name + \"Minlength\")};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn ((value.length < validator.minlength) && ! validator.negative)\n\t\t\t\t\t\t|| ((value.length >= validator.minlength) && validator.negative);\n\t\t\t\t}\n\t\t\t},\n\t\t\tmaxchecked: {\n\t\t\t\tname: \"maxchecked\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\tvar elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\n\t\t\t\t\telements.bind(\"click.validation\", function () {\n\t\t\t\t\t\t$this.trigger(\"change.validation\", {includeEmpty: true});\n\t\t\t\t\t});\n\t\t\t\t\treturn {maxchecked: $this.data(\"validation\" + name + \"Maxchecked\"), elements: elements};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn (validator.elements.filter(\":checked\").length > validator.maxchecked && ! validator.negative)\n\t\t\t\t\t\t|| (validator.elements.filter(\":checked\").length <= validator.maxchecked && validator.negative);\n\t\t\t\t},\n        blockSubmit: true\n\t\t\t},\n\t\t\tminchecked: {\n\t\t\t\tname: \"minchecked\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\tvar elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\n\t\t\t\t\telements.bind(\"click.validation\", function () {\n\t\t\t\t\t\t$this.trigger(\"change.validation\", {includeEmpty: true});\n\t\t\t\t\t});\n\t\t\t\t\treturn {minchecked: $this.data(\"validation\" + name + \"Minchecked\"), elements: elements};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn (validator.elements.filter(\":checked\").length < validator.minchecked && ! validator.negative)\n\t\t\t\t\t\t|| (validator.elements.filter(\":checked\").length >= validator.minchecked && validator.negative);\n\t\t\t\t},\n        blockSubmit: true\n\t\t\t}\n\t\t},\n\t\tbuiltInValidators: {\n\t\t\temail: {\n\t\t\t\tname: \"Email\",\n\t\t\t\ttype: \"shortcut\",\n\t\t\t\tshortcut: \"validemail\"\n\t\t\t},\n\t\t\tvalidemail: {\n\t\t\t\tname: \"Validemail\",\n\t\t\t\ttype: \"regex\",\n\t\t\t\tregex: \"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\\\.[A-Za-z]{2,4}\",\n\t\t\t\tmessage: \"Not a valid email address<!-- data-validator-validemail-message to override -->\"\n\t\t\t},\n\t\t\tpasswordagain: {\n\t\t\t\tname: \"Passwordagain\",\n\t\t\t\ttype: \"match\",\n\t\t\t\tmatch: \"password\",\n\t\t\t\tmessage: \"Does not match the given password<!-- data-validator-paswordagain-message to override -->\"\n\t\t\t},\n\t\t\tpositive: {\n\t\t\t\tname: \"Positive\",\n\t\t\t\ttype: \"shortcut\",\n\t\t\t\tshortcut: \"number,positivenumber\"\n\t\t\t},\n\t\t\tnegative: {\n\t\t\t\tname: \"Negative\",\n\t\t\t\ttype: \"shortcut\",\n\t\t\t\tshortcut: \"number,negativenumber\"\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tname: \"Number\",\n\t\t\t\ttype: \"regex\",\n\t\t\t\tregex: \"([+-]?\\\\\\d+(\\\\\\.\\\\\\d*)?([eE][+-]?[0-9]+)?)?\",\n\t\t\t\tmessage: \"Must be a number<!-- data-validator-number-message to override -->\"\n\t\t\t},\n\t\t\tinteger: {\n\t\t\t\tname: \"Integer\",\n\t\t\t\ttype: \"regex\",\n\t\t\t\tregex: \"[+-]?\\\\\\d+\",\n\t\t\t\tmessage: \"No decimal places allowed<!-- data-validator-integer-message to override -->\"\n\t\t\t},\n\t\t\tpositivenumber: {\n\t\t\t\tname: \"Positivenumber\",\n\t\t\t\ttype: \"min\",\n\t\t\t\tmin: 0,\n\t\t\t\tmessage: \"Must be a positive number<!-- data-validator-positivenumber-message to override -->\"\n\t\t\t},\n\t\t\tnegativenumber: {\n\t\t\t\tname: \"Negativenumber\",\n\t\t\t\ttype: \"max\",\n\t\t\t\tmax: 0,\n\t\t\t\tmessage: \"Must be a negative number<!-- data-validator-negativenumber-message to override -->\"\n\t\t\t},\n\t\t\trequired: {\n\t\t\t\tname: \"Required\",\n\t\t\t\ttype: \"required\",\n\t\t\t\tmessage: \"This is required<!-- data-validator-required-message to override -->\"\n\t\t\t},\n\t\t\tcheckone: {\n\t\t\t\tname: \"Checkone\",\n\t\t\t\ttype: \"minchecked\",\n\t\t\t\tminchecked: 1,\n\t\t\t\tmessage: \"Check at least one option<!-- data-validation-checkone-message to override -->\"\n\t\t\t}\n\t\t}\n\t};\n\n\tvar formatValidatorName = function (name) {\n\t\treturn name\n\t\t\t.toLowerCase()\n\t\t\t.replace(\n\t\t\t\t/(^|\\s)([a-z])/g ,\n\t\t\t\tfunction(m,p1,p2) {\n\t\t\t\t\treturn p1+p2.toUpperCase();\n\t\t\t\t}\n\t\t\t)\n\t\t;\n\t};\n\n\tvar getValue = function ($this) {\n\t\t// Extract the value we're talking about\n\t\tvar value = $this.val();\n\t\tvar type = $this.attr(\"type\");\n\t\tif (type === \"checkbox\") {\n\t\t\tvalue = ($this.is(\":checked\") ? value : \"\");\n\t\t}\n\t\tif (type === \"radio\") {\n\t\t\tvalue = ($('input[name=\"' + $this.attr(\"name\") + '\"]:checked').length > 0 ? value : \"\");\n\t\t}\n\t\treturn value;\n\t};\n\n  function regexFromString(inputstring) {\n\t\treturn new RegExp(\"^\" + inputstring + \"$\");\n\t}\n\n  /**\n   * Thanks to Jason Bunting via StackOverflow.com\n   *\n   * http://stackoverflow.com/questions/359788/how-to-execute-a-javascript-function-when-i-have-its-name-as-a-string#answer-359910\n   * Short link: http://tinyurl.com/executeFunctionByName\n  **/\n  function executeFunctionByName(functionName, context /*, args*/) {\n    var args = Array.prototype.slice.call(arguments).splice(2);\n    var namespaces = functionName.split(\".\");\n    var func = namespaces.pop();\n    for(var i = 0; i < namespaces.length; i++) {\n      context = context[namespaces[i]];\n    }\n    return context[func].apply(this, args);\n  }\n\n\t$.fn.jqBootstrapValidation = function( method ) {\n\n\t\tif ( defaults.methods[method] ) {\n\t\t\treturn defaults.methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));\n\t\t} else if ( typeof method === 'object' || ! method ) {\n\t\t\treturn defaults.methods.init.apply( this, arguments );\n\t\t} else {\n\t\t$.error( 'Method ' +  method + ' does not exist on jQuery.jqBootstrapValidation' );\n\t\t\treturn null;\n\t\t}\n\n\t};\n\n  $.jqBootstrapValidation = function (options) {\n    $(\":input\").not(\"[type=image],[type=submit]\").jqBootstrapValidation.apply(this,arguments);\n  };\n\n})( jQuery );\n"]},"hash":"b0a4e57e9749bf83193baf4923b8f89bb5ac395a"}
